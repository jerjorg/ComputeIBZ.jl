var documenterSearchIndex = {"docs":
[{"location":"Documentation/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"Documentation/#Index","page":"Documentation","title":"Index","text":"","category":"section"},{"location":"Documentation/#Lattices","page":"Documentation","title":"Lattices","text":"","category":"section"},{"location":"Documentation/","page":"Documentation","title":"Documentation","text":"Modules = [SymmetryReduceBZ.Lattices]\nOrder   = [:function, :type]","category":"page"},{"location":"Documentation/#Plotting","page":"Documentation","title":"Plotting","text":"","category":"section"},{"location":"Documentation/","page":"Documentation","title":"Documentation","text":"Modules = [SymmetryReduceBZ.Plotting]\nOrder   = [:function, :type]","category":"page"},{"location":"Documentation/#Symmetry","page":"Documentation","title":"Symmetry","text":"","category":"section"},{"location":"Documentation/","page":"Documentation","title":"Documentation","text":"Modules = [SymmetryReduceBZ.Symmetry]\nOrder   = [:function, :type]","category":"page"},{"location":"Documentation/#Utilites","page":"Documentation","title":"Utilites","text":"","category":"section"},{"location":"Documentation/","page":"Documentation","title":"Documentation","text":"Modules = [SymmetryReduceBZ.Utilities]\nOrder   = [:function, :type]","category":"page"},{"location":"Documentation/#Functions","page":"Documentation","title":"Functions","text":"","category":"section"},{"location":"Documentation/#Lattices-2","page":"Documentation","title":"Lattices","text":"","category":"section"},{"location":"Documentation/","page":"Documentation","title":"Documentation","text":"Modules = [SymmetryReduceBZ.Lattices]\nOrder   = [:function, :type]","category":"page"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.check_reduced-Tuple{AbstractMatrix{var\"#s8\"} where var\"#s8\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Lattices.check_reduced","text":"check_reduced(basis)\n\nVerify a lattice basis is Minkowski reduced\n\nArguments\n\nbasis::AbstractMatrix{<:Real}: the lattice basis given by the columns   of a 2x2 or 3x3 matrix.\n\nReturns\n\nBool: a boolean that indicates if the lattice basis is reduced.\n\nExamples\n\nusing SymmetryReduceBZ\nbasis = [1 0; 0 1]\nSymmetryReduceBZ.Lattices.check_reduced(basis)\n# output\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_BCC","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_BCC","text":"genlat_BCC(a)\n\nGenerate a body-centered cubic lattice.\n\nArguments\n\na::Real: the lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nSymmetryReduceBZ.Lattices.genlat_BCC(a)\n# output\n3×3 Matrix{Float64}:\n -0.5   0.5   0.5\n  0.5  -0.5   0.5\n  0.5   0.5  -0.5\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_BCT","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_BCT","text":"genlat_BCT(a,c)\n\nGenerate a body-centered tetragonal lattice.\n\nArguments\n\na::Real: a lattice constant\nc::Real: a lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nc=1.2;\nSymmetryReduceBZ.Lattices.genlat_BCT(a,c)\n# output\n3×3 Matrix{Float64}:\n -0.5   0.5   0.5\n  0.5  -0.5   0.5\n  0.6   0.6  -0.6\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_CUB","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_CUB","text":"genlat_CUB(a)\n\nGenerate a simple cubic lattice.\n\nArguments\n\na::Real: the lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nSymmetryReduceBZ.Lattices.genlat_CUB(a)\n# output\n3×3 Matrix{Int64}:\n 1  0  0\n 0  1  0\n 0  0  1\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_FCC","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_FCC","text":"genlat_FCC(a)\n\nGenerate a face-centered cubic lattice.\n\nArguments\n\na::Real: the lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nSymmetryReduceBZ.Lattices.genlat_FCC(a)\n# output\n3×3 Matrix{Float64}:\n 0.0  0.5  0.5\n 0.5  0.0  0.5\n 0.5  0.5  0.0\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_HEX","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_HEX","text":"genlat_HEX(a,c)\n\nGenerate a hexagonal lattice.\n\nArguments\n\na::Real: a lattice constant\nc::Real: a lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nc=1.2;\nSymmetryReduceBZ.Lattices.genlat_HEX(a,c)\n# output\n3×3 Matrix{Float64}:\n  0.5       0.5       0.0\n -0.866025  0.866025  0.0\n  0.0       0.0       1.2\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_HXG","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_HXG","text":"genlat_HXG(a)\n\nGenerate a 2D hexagonal lattice.\n\nArguments\n\na::Real: the lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nSymmetryReduceBZ.Lattices.genlat_HXG(a)\n# output\n2×2 Matrix{Float64}:\n 1.0  -0.5\n 0.0   0.866025\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_MCL","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_MCL","text":"genlat_MCL(a,b,c,α)\n\nGenerate a monoclinic lattice.\n\nArguments\n\na::Real: a lattice constant\nb::Real: a lattice constant\nc::Real: a lattice constant\nα::Real: a lattice angle in radians less than π/2\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nb=1.2\nc=1.4\nα=π/6;\nSymmetryReduceBZ.Lattices.genlat_MCL(a,b,c,α)\n# output\n3×3 Matrix{Float64}:\n 1.0  0.0  0.0\n 0.0  1.2  1.21244\n 0.0  0.0  0.7\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_MCLC","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_MCLC","text":"genlat_MCLC(a,b,c,α)\n\nGenerate a base-centered monoclinic lattice.\n\nArguments\n\na::Real: a lattice constant\nb::Real: a lattice constant\nc::Real: a lattice constant\nα::Real: a lattice angle in radians less than π/2\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nb=1.2\nc=1.4\nα=π/6;\nSymmetryReduceBZ.Lattices.genlat_MCLC(a,b,c,α)\n# output\n3×3 Matrix{Float64}:\n 0.5  -0.5  0.0\n 0.6   0.6  1.21244\n 0.0   0.0  0.7\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_OBL","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_OBL","text":"genlat_OBL(a,b,θ)\n\nGenerate an oblique lattice.\n\nArguments\n\na::Real: the lattice constant\nb::Real: the lattice constant\nθ::Real: the lattice angle\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nb=1.2\nθ=π/3\nSymmetryReduceBZ.Lattices.genlat_OBL(a,b,θ)\n# output\n2×2 Matrix{Float64}:\n 1.0  0.6\n 0.0  1.03923\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_ORC","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_ORC","text":"genlat_ORC(a,b,c)\n\nGenerate an orthorhombic lattice.\n\nArguments\n\na::Real: a lattice constant\nb::Real: a lattice constant\nc::Real: a lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nb=1.4;\nc=1.2;\nSymmetryReduceBZ.Lattices.genlat_ORC(a,b,c)\n# output\n3×3 Matrix{Float64}:\n 1.0  0.0  0.0\n 0.0  1.4  0.0\n 0.0  0.0  1.2\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_ORCC","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_ORCC","text":"genlat_ORCC(a,b,c)\n\nGenerate a base-centered orthorhombic lattice.\n\nArguments\n\na::Real: a lattice constant\nb::Real: a lattice constant\nc::Real: a lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nb=1.2;\nc=1.4;\nSymmetryReduceBZ.Lattices.genlat_ORCC(a,b,c)\n# output\n3×3 Matrix{Float64}:\n  0.5  0.5  0.0\n -0.6  0.6  0.0\n  0.0  0.0  1.4\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_ORCF","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_ORCF","text":"genlat_ORCF(a,b,c)\n\nGenerate a face-centered orthorhombic lattice.\n\nArguments\n\na::Real: a lattice constant\nb::Real: a lattice constant\nc::Real: a lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nb=1.4;\nc=1.2;\nSymmetryReduceBZ.Lattices.genlat_ORCF(a,b,c)\n# output\n3×3 Matrix{Float64}:\n 0.0  0.5  0.5\n 0.7  0.0  0.7\n 0.6  0.6  0.0\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_ORCI","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_ORCI","text":"genlat_ORCI(a,b,c)\n\nGenerate a body-centered orthorhombic lattice.\n\nArguments\n\na::Real: a lattice constant\nb::Real: a lattice constant\nc::Real: a lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nb=1.4;\nc=1.2;\nSymmetryReduceBZ.Lattices.genlat_ORCI(a,b,c)\n# output\n3×3 Matrix{Float64}:\n -0.5   0.5   0.5\n  0.7  -0.7   0.7\n  0.6   0.6  -0.6\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_REC","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_REC","text":"genlat_REC(a,b)\n\nGenerate a rectangular lattice.\n\nArguments\n\na::Real: the lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nb=1.2\nSymmetryReduceBZ.Lattices.genlat_REC(a,b)\n# output\n2×2 Matrix{Float64}:\n 1.0  0.0\n 0.0  1.2\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_RECI","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_RECI","text":"genlat_RECI(a,b)\n\nGenerate a body-centered rectangular lattice.\n\nArguments\n\na::Real: the lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nb=1.2\nSymmetryReduceBZ.Lattices.genlat_RECI(a,b)\n# output\n2×2 Matrix{Float64}:\n  0.5  0.5\n -0.6  0.6\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_RHL","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_RHL","text":"genlat_RHL(a,α)\n\nGenerate a rhombohedral lattice.\n\nArguments\n\na::Real: a lattice constant\nα::Real: a lattice angle in radians\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nα=π/6;\nSymmetryReduceBZ.Lattices.genlat_RHL(a,α)\n# output\n3×3 Matrix{Float64}:\n  0.965926  0.965926  0.896575\n -0.258819  0.258819  0.0\n  0.0       0.0       0.442891\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_SQR","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_SQR","text":"genlat_SQR(a)\n\nGenerate a square lattice.\n\nArguments\n\na::Real: the lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nSymmetryReduceBZ.Lattices.genlat_SQR(a)\n# output\n2×2 Matrix{Int64}:\n 1  0\n 0  1\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_TET","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_TET","text":"genlat_TET(a,c)\n\nGenerate a simple tetragonal lattice.\n\nArguments\n\na::Real: a lattice constant\nc::Real: a lattice constant\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nc=1.2;\nSymmetryReduceBZ.Lattices.genlat_TET(a,c)\n# output\n3×3 Matrix{Float64}:\n 1.0  0.0  0.0\n 0.0  1.0  0.0\n 0.0  0.0  1.2\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.genlat_TRI","page":"Documentation","title":"SymmetryReduceBZ.Lattices.genlat_TRI","text":"genlat_TRI(a,b,c,α,β,γ)\n\nGenerate a triclinic lattice.\n\nArguments\n\na::Real: a lattice constant\nb::Real: a lattice constant\nc::Real: a lattice constant\nα::Real: a lattice angle in radians\nβ::Real: a lattice angle in radians\nγ::Real: a lattice angle in radians\ntype::String=\"primitive\": the lattice type: \"primitive\" or \"conventional\".\n\nReturns\n\nAbstractMatrix{<:Real}: the basis of the lattice as   columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\na=1\nb=1.2\nc=1.4\nα=π/6;\nβ=π/3;\nγ=π/4;\nSymmetryReduceBZ.Lattices.genlat_TRI(a,b,c,α,β,γ)\n# output\n3×3 Matrix{Float64}:\n 1.0  0.848528  0.7\n 0.0  0.848528  1.01464\n 0.0  0.0       0.663702\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.get_latparams-Tuple{AbstractMatrix{var\"#s1\"} where var\"#s1\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Lattices.get_latparams","text":"get_latparams(latvecs)\n\nCalculate the lattice constants and angles of a lattice basis.\n\nArguments\n\nlatvecs::AbstractMatrix{<:Real}: the lattice basis as columns of an array.\n\nReturns\n\nA list where the first element is a list lattice constants (a,b,c) and second   lattice angles in radians (α,β,γ).\n\nExamples\n\nusing SymmetryReduceBZ\nlatvecs = [1 0; 0 1]\nSymmetryReduceBZ.Lattices.get_latparams(latvecs)\n# output\n2-element Vector{Vector{Float64}}:\n [1.0, 1.0]\n [1.5707963267948966, 1.5707963267948966]\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.get_recip_latvecs","page":"Documentation","title":"SymmetryReduceBZ.Lattices.get_recip_latvecs","text":"get_recip_latvecs(real_latvecs, convention)\n\nCalculate the reciprocal lattice vectors.\n\nArguments\n\nreal_latvecs::AbstractMatrix{<:Real}: the real-space lattice vectors or   primitive translation vectors as columns of a 2x2 or 3x3 array.\nconvention::String=\"ordinary\": the convention used to go between real and   reciprocal space. The two conventions are ordinary (temporal) frequency and   angular frequency. The transformation from real to reciprocal space is   unitary if the convention is ordinary.\n\nReturns\n\nrecip_latvecs::Array{<:Real,2} the reciprocal lattice vectors (reciprocal   primitive translation vectors) as columns of a 2x2 or 3x3 array.\n\nExamples\n\nusing SymmetryReduceBZ\nreal_latvecs=[1 0 0; 0 1 0; 0 0 1]\nconvention=\"angular\"\nSymmetryReduceBZ.Lattices.get_recip_latvecs(real_latvecs,convention)\n# output\n3×3 Matrix{Float64}:\n 6.28319  0.0      0.0\n 0.0      6.28319  0.0\n 0.0      0.0      6.28319\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.minkowski_reduce-Tuple{AbstractMatrix{var\"#s7\"} where var\"#s7\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Lattices.minkowski_reduce","text":"minkowski_reduce(basis;rtol,atol)\n\nMinkowski reduce a lattice basis. Follows the logic of Fig. 4 in \"Low-Dimensional Lattice Basis Reduction Revisited\" by Nguyen, 2009.\n\nArguments\n\nbasis::AbstractMatrix{<:Real}: the lattice basis given by the columns   of a 2x2 or 3x3 array.\nrtol::Real=sqrt(eps(float(maximum(basis)))): a relative tolerance.\natol::Real=1e-9: an absolute tolerance.\n\nReturns\n\nrbasis:: the Minkowski reduced lattice basis as columns of an array.\n\nExamples\n\nusing SymmetryReduceBZ\nbasis = [1 2 0; 0 1 0; 0 0 1]\nSymmetryReduceBZ.Lattices.minkowski_reduce(basis)\n# output\n3×3 Matrix{Int64}:\n 0  1  0\n 0  0  1\n 1  0  0\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.reduce_basis!-Tuple{AbstractMatrix{var\"#s9\"} where var\"#s9\"<:Real, Int64}","page":"Documentation","title":"SymmetryReduceBZ.Lattices.reduce_basis!","text":"reduce_basis!(basis,k;rtol,atol)\n\nReduces the kth lattice vector. This is accomplished by locating the lattice point closest to the projection of the kth lattice vector onto the line or plane given by the other lattice vector(s), subtracting the closest lattice point from the kth lattice vector, and reordering the lattice vectors by increasing Euclidean norms.\n\nArguments\n\nbasis::AbstractMatrix{<:Real}: the lattice basis as columns of an array.\nk::Int: Keeps track of which lattice vector needs to be reduced.\nrtol::Real=sqrt(eps(float(maximum(basis)))): a relative tolerance.\natol::Real=1e-9: an absolute tolerance.\n\nReturns\n\nbasis::AbstractMatrix{<:Real}: the partially reduced lattice basis as   columns of an array.\nk::Int: The index of the lattice vector that needs to be reduced next.\n\nExamples\n\nusing SymmetryReduceBZ\nbasis = Array([1 2 0; 0 1 0; 3 2 1]')\nk=2\nSymmetryReduceBZ.Lattices.reduce_basis!(basis,k)\nbasis\n# output\n3×3 Matrix{Int64}:\n 0  1  3\n 1  2  2\n 0  0  1\n\n\n\n\n\n","category":"method"},{"location":"Documentation/","page":"Documentation","title":"Documentation","text":"SymmetryReduceBZ.Lattices.lattice_types","category":"page"},{"location":"Documentation/#SymmetryReduceBZ.Lattices.lattice_types","page":"Documentation","title":"SymmetryReduceBZ.Lattices.lattice_types","text":"A list of lattice types. Follows the naming convention in the article High-throughput electronic band structure calculations: Challenges and tools by Wahyu Setyawan and Stefano Curtarolo except triclinic lattices have \"β\" instead of \"b\" as subscripts.\n\n\n\n\n\n","category":"constant"},{"location":"Documentation/#Plotting-2","page":"Documentation","title":"Plotting","text":"","category":"section"},{"location":"Documentation/","page":"Documentation","title":"Documentation","text":"Modules = [SymmetryReduceBZ.Plotting]\nOrder   = [:function, :type]","category":"page"},{"location":"Documentation/#SymmetryReduceBZ.Plotting.plot_2Dconvexhull","page":"Documentation","title":"SymmetryReduceBZ.Plotting.plot_2Dconvexhull","text":"plot_2Dconvexhull(convexhull, ax, color)\n\nPlot a 2D convex hull\n\nArguments\n\nconvexhull::Chull{<:Real}: a convex hull object.\nax::PyObject: an axes object from matplotlib.\nfacecolor::String=\"blue\": the color of the area within the convex hull.\nalpha::Real=0.3: the transparency of the convex hull.\nlinewidth::Real=3: the width of the edges.\nedgecolor::String=\"black\": the color of the edges.\n\nReturns\n\nax::PyObject: updated ax that includes a plot of the convex hull.\n\nExamples\n\nimport SymmetryReduceBZ.Symmetry: calc_bz, calc_ibz\nimport SymmetryReduceBZ.Plotting: plot_2Dconvexhull\nreal_latvecs = [1 0; 0 1]\nconvention=\"ordinary\"\natom_types=[0]\natom_pos = Array([0 0]')\ncoords = \"Cartesian\"\nibzformat = \"convex hull\"\nmakeprim=false\nbz = calc_bz(real_latvecs,atom_types,atom_pos,coords,ibzformat,makeprim,convention)\nibz = calc_ibz(real_latvecs,atom_types,atom_pos,coords,ibzformat,makeprim,convention)\nax = plot_2Dconvexhull(bz,facecolor=\"deepskyblue\",linewidth=3,edgecolor=\"cyan\",alpha=0.2)\nax = plot_2Dconvexhull(ibz,ax;facecolor=\"coral\",linewidth=3,edgecolor=\"magenta\",alpha=0.4)\n# output\nPyObject <AxesSubplot: >\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Plotting.plot_3Dconvexhull","page":"Documentation","title":"SymmetryReduceBZ.Plotting.plot_3Dconvexhull","text":"plot_3Dconvexhull(convexhull,ax;color)\n\nPlot a 3D convex hull\n\nArguments\n\nconvexhull::Chull{<:Real}: a convex hull object.\nax::PyObject: an axes object from matplotlib.\nfacecolors::String=\"blue\": the color of the faces of the convex hull.\nalpha::Real=0.3: the transparency of the faces of the convex hull.\nlinewidths::Real=1: the width of the edges of the convex hull.\nedgecolors::String=\"black\": the color of the edges of the convex hull.\n\nReturns\n\nax::PyObject: updated ax that includes a plot of the convex hull.\n\nExamples\n\nimport SymmetryReduceBZ.Symmetry: calc_bz, calc_ibz\nimport SymmetryReduceBZ.Plotting: plot_3Dconvexhull\nusing PyPlot\nreal_latvecs = [1 0 0; 0 1 0; 0 0 1]\nconvention=\"ordinary\"\natom_types=[0]\natom_pos = Array([0 0 0]')\ncoords = \"Cartesian\"\nbzformat = \"convex hull\"\nmakeprim=false\nbz = calc_bz(real_latvecs,atom_types,atom_pos,coords,bzformat,makeprim,convention)\nibz = calc_ibz(real_latvecs,atom_types,atom_pos,coords,bzformat,makeprim,convention)\nfig = figure()\nax = fig.add_subplot(111, projection=\"3d\")\nax = plot_3Dconvexhull(ibz,ax,facecolors=\"coral\",alpha=1,edgecolors=\"black\",linewidths = 1)\nax = plot_3Dconvexhull(bz,ax,facecolors=\"deepskyblue\",edgecolors=\"white\",linewidths=1,alpha=0.2)\n# output\nPyObject <Axes3DSubplot: >\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Plotting.plot_convexhulls","page":"Documentation","title":"SymmetryReduceBZ.Plotting.plot_convexhulls","text":"plot_convexhulls(real_latvecs,atom_types,atom_pos,coords,makeprim,convention;rtol,atol)\n\nPlot the Brillouin and Irreducible Brillouin zone in 2D or 3D.\n\nArguments\n\nreal_latvecs::AbstractMatrix{<:Real}: the basis of a real-space lattice as   columns of a matrix.\natom_types:AbstractVector{<:Int}: a list of atom types as integers.\natom_pos::AbstractMatrix{<:Real}: the positions of atoms in the crystal   structure as columns of a matrix.\ncoords::String: indicates the positions of the atoms are in \"lattice\" or   \"Cartesian\" coordinates.\nmakeprim::Bool=false: make the unit cell primitive before calculating the   the IBZ if equal to true.\nconvention::String=\"ordinary\": the convention used to go between real and   reciprocal space. The two conventions are ordinary (temporal) frequency and   angular frequency. The transformation from real to reciprocal space is   unitary if the convention is ordinary.\nrtol::Real=sqrt(eps(float(maximum(real_latvecs)))) a relative tolerance for   floating point comparisons.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\nax::PyObject: an updated ax with plots of the BZ and IBZ.\n\nExamples\n\nusing SymmetryReduceBZ\nreal_latvecs = [1 0; .5 1]\natom_types=[0]\natom_pos = Array([0 0]')\ncoords = \"Cartesian\"\nmakeprim = true\nconvention = \"ordinary\"\nax=plot_convexhulls(real_latvecs,atom_types,atom_pos,coords,makeprim,convention)\n# output\nPyObject <AxesSubplot: >\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#Symmetry-2","page":"Documentation","title":"Symmetry","text":"","category":"section"},{"location":"Documentation/","page":"Documentation","title":"Documentation","text":"Modules = [SymmetryReduceBZ.Symmetry]\nOrder   = [:function, :type]","category":"page"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.calc_bz","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.calc_bz","text":"calc_bz(real_latvecs,atom_types,atom_pos,coordinates,bzformat,makeprim,\n    convention,library;rtol,atol)\n\nCalculate the Brillouin zone for the given real-space lattice basis.\n\nArguments\n\nreal_latvecs::AbstractMatrix{<:Real}: the real-space lattice vectors or   primitive translation vectors as columns of a 2x2 or 3x3 matrix.\natom_typesAbstractVector{<:Int}: a list of atom types as integers.\natom_pos::AbstractMatrix{<:Real}: the positions of atoms in the crystal   structure as columns of a matrix.\ncoordinates::String: indicates the positions of the atoms are in \"lattice\"   or \"Cartesian\" coordinates.\nbzformat::String: the format of the Brillouin zone. Options include   \"convex hull\" and \"half-space\".\nmakeprim::Bool=false: make the unit cell primitive before calculating the   the BZ if equal to true.\nconvention::String=\"ordinary\": the convention used to go between real and   reciprocal space. The two conventions are ordinary (temporal) frequency and   angular frequency. The transformation from real to reciprocal space is   unitary if the convention is ordinary.\nlibrary::Polyhedra.Library=CDDLib.Library(): a polyhedron manipulation library\nrtol::Real=sqrt(eps(float(maximum(real_latvecs)))) a relative tolerance for   floating point comparisons.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\nbz: the vertices or half-space representation of the Brillouin zone   depending on the value of vertsOrHrep.\n\nExamples\n\nusing SymmetryReduceBZ\nreal_latvecs = [1 0; 0 1]\nconvention=\"ordinary\"\natom_types=[0]\natom_pos = Array([0 0]')\ncoordinates = \"Cartesian\"\nbzformat = \"convex hull\"\nmakeprim=false\nSymmetryReduceBZ.Symmetry.calc_bz(real_latvecs,atom_types,atom_pos,coordinates,\n    bzformat,makeprim,convention)\n# output\nConvex Hull of 4 points in 2 dimensions\nHull segment vertex indices:\nInt32[3, 2, 1, 4]\nPoints on convex hull in original order:\n\n[0.5 0.5; 0.5 -0.5; -0.5 -0.5; -0.5 0.5]\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.calc_ibz","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.calc_ibz","text":"calc_ibz(real_latvecs,atom_types,atom_pos,coordinates,ibzformat,makeprim,\n    convention,library;rtol,atol)\n\nCalculate the irreducible Brillouin zone of a crystal structure in 2D or 3D.\n\nArguments\n\nreal_latvecs::AbstractMatrix{<:Real}: the basis of a real-space lattice as   columns of a matrix.\natom_types:AbstractVector{<:Int}: a list of atom types as integers.\natom_pos::AbstractMatrix{<:Real}: the positions of atoms in the crystal   structure as columns of a matrix.\ncoordinates::String: indicates the positions of the atoms are in \"lattice\"   or \"Cartesian\" coordinates.\nibzformat::String: the format of the irreducible Brillouin zone. Options   include \"convex hull\" and \"half-space\".\nmakeprim::Bool=false: make the unit cell primitive before calculating the   IBZ if true.\nconvention::String=\"ordinary\": the convention used to go between real and   reciprocal space. The two conventions are ordinary (temporal) frequency and   angular frequency. The transformation from real to reciprocal space is   unitary if the convention is ordinary.\nlibrary::Polyhedra.Library=CDDLib.Library(): a polyhedron manipulation library\nrtol::Real=sqrt(eps(float(maximum(real_latvecs)))) a relative tolerance for   floating point comparisons.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\nibz: the irreducible Brillouin zone as a convex hull or intersection of   half-spaces.\n\nExamples\n\nusing SymmetryReduceBZ\nreal_latvecs = [1 0; 0 1]\nconvention=\"ordinary\"\natom_types=[0]\natom_pos = Array([0 0]')\ncoordinates = \"Cartesian\"\nibzformat = \"convex hull\"\nmakeprim=false\nSymmetryReduceBZ.Symmetry.calc_ibz(real_latvecs,atom_types,atom_pos,coordinates,\n    ibzformat,makeprim,convention)\n# output\nConvex Hull of 3 points in 2 dimensions\nHull segment vertex indices:\nInt32[1, 2, 3]\nPoints on convex hull in original order:\n\n[0.0 0.0; 0.5 0.0; 0.5 0.5]\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.calc_pointgroup-Tuple{AbstractMatrix{var\"#s60\"} where var\"#s60\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.calc_pointgroup","text":"calc_pointgroup(latvecs;rtol,atol)\n\nCalculate the point group of a lattice in 2D or 3D.\n\nArguments\n\nlatvecs::AbstractMatrix{<:Real}: the basis of the lattice as columns of a   matrix.\nrtol::Real=sqrt(eps(float(maximum(real_latvecs)))): a relative tolerance for   floating point comparisons. It is used to compare lengths of vectors and the   volumes of primitive cells.\natol::Real=1e-9: an absolute tolerance for floating point comparisons. It is   used to compare lengths of vectors and the volumes of primitive cells.\n\nReturns\n\npointgroup::Vector{Matrix{Float64}}: the point group of the lattice. The   operators operate on points in Cartesian coordinates from the right.\n\nExamples\n\nusing SymmetryReduceBZ\nbasis = [1 0; 0 1]\nSymmetryReduceBZ.Symmetry.calc_pointgroup(basis)\n# output\n8-element Vector{Matrix{Float64}}:\n [0.0 -1.0; -1.0 0.0]\n [0.0 -1.0; 1.0 0.0]\n [-1.0 0.0; 0.0 -1.0]\n [1.0 0.0; 0.0 -1.0]\n [-1.0 0.0; 0.0 1.0]\n [1.0 0.0; 0.0 1.0]\n [0.0 1.0; -1.0 0.0]\n [0.0 1.0; 1.0 0.0]\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.calc_spacegroup-Tuple{AbstractMatrix{var\"#s9\"} where var\"#s9\"<:Real, AbstractVector{var\"#s8\"} where var\"#s8\"<:Int64, AbstractMatrix{var\"#s7\"} where var\"#s7\"<:Real, String}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.calc_spacegroup","text":"calc_spacegroup(real_latvecs,atom_types,atom_pos,coordinates;rtol,atol)\n\nCalculate the space group of a crystal structure.\n\nArguments\n\nreal_latvecs::AbstractMatrix{<:Real}: the basis of the lattice as columns   of a matrix.\natom_types::AbstractVector{<:Int}: a list of atom types as integers.\natom_pos::AbstractMatrix{<:Real}: the positions of atoms in the crystal   structure as columns of a matrix.\ncoordinates::String: indicates the positions of the atoms are in \"lattice\"   or \"Cartesian\" coordinates.\nrtol::Real=sqrt(eps(float(maximum(real_latvecs)))) a relative tolerance for   floating point comparisons.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\nspacegroup::Tuple: the space group of the crystal structure. The first element of   spacegroup is a list of fractional translations, and the second element is   a list of point operators. The translations are in Cartesian coordinates,   and the operators operate on points in Cartesian coordinates.\n\nExamples\n\nusing SymmetryReduceBZ\nreal_latvecs = Array([1 0; 2 1]')\natom_types = [0, 1]\natom_pos = Array([0 0; 0.5 0.5]')\ncoordinates = \"Cartesian\"\nSymmetryReduceBZ.Symmetry.calc_spacegroup(real_latvecs,atom_types,atom_pos,\n    coordinates)\n# output\n([[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]], [[0.0 -1.0; -1.0 0.0], [0.0 -1.0; 1.0 0.0], [-1.0 0.0; 0.0 -1.0], [1.0 0.0; 0.0 -1.0], [-1.0 0.0; 0.0 1.0], [1.0 0.0; 0.0 1.0], [0.0 1.0; -1.0 0.0], [0.0 1.0; 1.0 0.0]])\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.complete_orbit-Tuple{AbstractMatrix{var\"#s97\"} where var\"#s97\"<:Real, Vector{Matrix{Float64}}}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.complete_orbit","text":"complete_orbit(pt,pointgroup,rtol=sqrt(eps(float(maximum(pt)))),atol=1e-9)\n\nComplete the orbits of multiple points.\n\nArguments\n\npt::AbstractMatrix{<:Real}: the Cartesian coordinates of a points as columns of   a matrix.\npointgroup::Vector{Matrix{Float64}}: the point group operators   in a nested list. The operators operate on points in Cartesian coordinates from the right.\nrtol::Real=sqrt(eps(float(maximum(pt)))): a relative tolerance.\natol::Real=1e-9: an absolute tolerance.\n\nReturns\n\n::AbstractMatrix{<:Real}: the unique points of the orbits in Cartesian coordinates as   columns of a matrix.\n\nExamples\n\nimport SymmetryReduceBZ.Symmetry: complete_orbit\npts = [0.0 0.05 0.1; 0.0 0.0 0.0]\npointgroup = [[0.0 -1.0; -1.0 0.0], [0.0 -1.0; 1.0 0.0], [-1.0 0.0; 0.0 -1.0], [1.0 0.0; 0.0 -1.0], [-1.0 0.0; 0.0 1.0], [1.0 0.0; 0.0 1.0], [0.0 1.0; -1.0 0.0], [0.0 1.0; 1.0 0.0]]\ncomplete_orbit(pts,pointgroup)\n# output\n2×9 Matrix{Float64}:\n 0.0   0.0   0.0   -0.05  0.05   0.0  0.0  -0.1  0.1\n 0.0  -0.05  0.05   0.0   0.0   -0.1  0.1   0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.complete_orbit-Tuple{AbstractVector{var\"#s97\"} where var\"#s97\"<:Real, Vector{Matrix{Float64}}}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.complete_orbit","text":"complete_orbit(pt,pointgroup,rtol=sqrt(eps(float(maximum(pt)))),atol=1e-9)\n\nComplete the orbit of a point.\n\nArguments\n\npt::AbstractVector{<:Real}: the Cartesian coordinates of a point.\npointgroup::Vector{Matrix{Float64}}: the point group operators   in a nested list. The operators operate on points in Cartesian coordinates   from the right.\nrtol::Real=sqrt(eps(float(maximum(pt)))): a relative tolerance.\natol::Real=1e-9: an absolute tolerance.\n\nReturns\n\n::AbstractMatrix{<:Real}: the points of the orbit in Cartesian coordinates as   columns of a matrix.\n\nExamples\n\nimport SymmetryReduceBZ.Symmetry: complete_orbit\npt = [0.05, 0.0]\npointgroup = [[0.0 -1.0; -1.0 0.0], [0.0 -1.0; 1.0 0.0], [-1.0 0.0; 0.0 -1.0], [1.0 0.0; 0.0 -1.0], [-1.0 0.0; 0.0 1.0], [1.0 0.0; 0.0 1.0], [0.0 1.0; -1.0 0.0], [0.0 1.0; 1.0 0.0]]\ncomplete_orbit(pt,pointgroup)\n# output\n2×4 Matrix{Float64}:\n  0.0   0.0   -0.05  0.05\n -0.05  0.05   0.0   0.0\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.inhull-Tuple{AbstractVector{var\"#s60\"} where var\"#s60\"<:Real, QHull.Chull{var\"#s59\"} where var\"#s59\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.inhull","text":"inhull(point, chull; rtol, atol)\n\nCheck if a point lies within a convex hull (including the boundaries).\n\nArguments\n\npoint::AbstractVector{<:Real}: a point in Cartesian coordinates.\nchull::Chull{Float64}: a convex hull in 2D or 3D.\nrtol::Real=sqrt(eps(float(maximum(flatten(chull.points))))): a relative   tolerance for floating point comparisons. Needed when a point is on the   boundary of the convex hull.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\ninside::Bool: if true, the point lies within the convex hull.\n\nExamples\n\nimport QHull: chull\nimport SymmetryReduceBZ.Symmetry: inhull\npts = [0.5 0.25; 0.5 -0.25; -0.5 -0.25; -0.5 0.25]\npt = [0,0]\nconvexhull = chull(pts)\ninhull(pt,convexhull)\n# output\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.make_primitive-Tuple{AbstractMatrix{var\"#s88\"} where var\"#s88\"<:Real, AbstractVector{var\"#s87\"} where var\"#s87\"<:Integer, AbstractMatrix{var\"#s86\"} where var\"#s86\"<:Real, String}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.make_primitive","text":"make_primitive(real_latvecs,atom_types,atom_pos,coordinates;rtol,atol)\n\nMake a given unit cell primitive.\n\nThis is a Julia translation of the function by the same in     https://github.com/msg-byu/symlib.\n\nArguments\n\nreal_latvecs::AbstractMatrix{<:Real}: the basis of the lattice as columns   of a matrix.\natom_types::AbstractVector{<:Int}: a list of atom types as integers.\natom_pos::AbstractMatrix{<:Real}: the positions of atoms in the crystal   structure as columns of a matrix.\ncoordinates::String: indicates the positions of the atoms are in \"lattice\"   or \"Cartesian\" coordinates.\nrtol::Real=sqrt(eps(float(maximum(real_latvecs)))) a relative tolerance for   floating point comparisons.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\nprim_latvecs::AbstractMatrix{<:Real}: the primitive lattice vectors as   columns of a matrix.\nprim_types::AbstractVector{<:Int}: a list of atom types as integers in the   primitive unit cell.\nprim_pos::AbstractMatrix{<:Real}: the positions of the atoms in in the   crystal structure as columns of a matrix in Cartesian coordinates.\n\nExamples\n\nimport SymmetryReduceBZ.Lattices: genlat_CUB\nimport SymmetryReduceBZ.Symmetry: make_primitive\na = 1.0\nreal_latvecs = genlat_CUB(a)\natom_types = [0,0]\natom_pos = Array([0 0 0; 0.5 0.5 0.5]')\nibzformat = \"convex hull\"\ncoordinates = \"Cartesian\"\nconvention = \"ordinary\"\nmake_primitive(real_latvecs, atom_types, atom_pos, coordinates)\n# output\n([1.0 0.0 0.5; 0.0 1.0 0.5; 0.0 0.0 0.5], [0], [0.0; 0.0; 0.0])\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.mapto_bz-Tuple{AbstractMatrix{var\"#s59\"} where var\"#s59\"<:Real, AbstractMatrix{var\"#s58\"} where var\"#s58\"<:Real, AbstractMatrix{var\"#s57\"} where var\"#s57\"<:Real, String}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.mapto_bz","text":"mapto_bz(kpoints,recip_latvecs,inv_rlatvecs,coordinates;rtol,atol)\n\nMap points as columns of a matrix to the Brillouin zone.\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.mapto_bz-Tuple{AbstractVector{var\"#s9\"} where var\"#s9\"<:Real, AbstractMatrix{var\"#s8\"} where var\"#s8\"<:Real, AbstractMatrix{var\"#s7\"} where var\"#s7\"<:Real, String}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.mapto_bz","text":"mapto_bz(kpoint,recip_latvecs,inv_latvecs,coordinates;rtol,atol)\n\nMap a k-point to a translationally equivalent point within the Brillouin zone.\n\nArguments\n\nkpoint::AbstractVector{<:Real}: a single k-point in lattice or Cartesian   coordinates.\nrecip_latvecs::AbstractMatrix{<:Real}: the reciprocal lattice vectors as   columns of a matrix.\ninv_latvecs::AbstractMatrix{<:Real}: the inverse matrix of the reciprocal   lattice vectors.\ncoordinates::String: the coordinates of the given point, either \"lattice\"   or \"Cartesian\". The point returned will be in the same coordinates.\nrtol::Real=sqrt(eps(float(maximum(recip_latvecs)))): a relative tolerance   for floating point comparisons. Finite precision errors creep in when pt   is transformed to lattice coordinates because the transformation requires   calculating a matrix inverse. The components of the k-point in lattice   coordinates are checked to ensure that values close to 1 are equal to 1.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\nbz_point::AbstractVector{<:Real}: the symmetrically equivalent k-point   within the Brillouin zone in either lattice or Cartesian coordinates,   depending on the coordinates specified.\n\nExamples\n\nimport SymmetryReduceBZ.Symmetry: mapto_bz\nimport LinearAlgebra: inv\nrecip_latvecs = [1 0 0; 0 1 0; 0 0 1]\ninv_latvecs = inv(recip_latvecs)\nkpoint = [2, 3, 2]\ncoordinates = \"Cartesian\"\nmapto_bz(kpoint, recip_latvecs, inv_latvecs, coordinates)\n# output\n3-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.mapto_ibz","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.mapto_ibz","text":"mapto_ibz(kpoints,recip_latvecs,inv_rlatvecs,ibz,pointgroup,coordinates;\n    rtol,atol)\n\nMap points as columns of a matrix to the IBZ and then remove duplicate points.\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.mapto_ibz-Tuple{AbstractVector{var\"#s58\"} where var\"#s58\"<:Real, AbstractMatrix{var\"#s57\"} where var\"#s57\"<:Real, AbstractMatrix{var\"#s56\"} where var\"#s56\"<:Real, QHull.Chull{Float64}, Vector{Matrix{Float64}}, String}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.mapto_ibz","text":"mapto_ibz(kpoint,recip_latvecs,inv_rlatvecs,ibz,pointgroup,coordinates;rtol,\n    atol)\n\nMap a point to a symmetrically equivalent point within the IBZ.\n\nArguments\n\nkpoint::AbstractVector{<:Real}: a k-point in 2D or 3D in Cartesian   coordinates.\nrecip_latvecs::AbstractMatrix{<:Real}: the reciprocal lattice vectors as   columns of a a matrix.\ninv_rlatvecs::AbstractMatrix{<:Real}: the inverse of the square matrix   recip_latvecs.\nibz::Chull{Float64}: the irreducible Brillouin zone as as a convex hull   objects from QHull.\npointgroup::Vector{Matrix{Float64}}: a list of point symmetry operators   in matrix form that operate on points from the left.\ncoordinates::String: the coordinates the k-point is in. Options are   \"lattice\" and \"Cartesian\". The k-point within the IBZ is returned in   the same coordinates.\nrtol::Real=sqrt(eps(float(maximum(recip_latvecs)))): a relative tolerance   for floating point comparisons. The k-point is first mapped the unit cell   and rtol is used when comparing components of the k-point to 1. It is   also used for comparing floats to zero when checking if the point lies   within ibz.\natol::Real=1e-9: an absolute tolerance for floating point comparisons. This   is used everywhere rtol is used.\n\nReturns\n\nrot_point::AbstractVector{<:Real}: a symmetrically equivalent k-point to   kpoint within the irreducible Brillouin zone in the same coordinates as   coordinates.\n\nExamples\n\nimport SymmetryReduceBZ.Lattices: get_recip_latvecs\nimport SymmetryReduceBZ.Symmetry: calc_spacegroup, mapto_ibz\nimport LinearAlgebra: inv\nimport QHull: chull\nreal_latvecs = [1 0; 0 2]\natom_types=[0]\natom_pos=Array([0 0]')\ncoordinates=\"Cartesian\"\nconvention=\"ordinary\"\nrecip_latvecs = get_recip_latvecs(real_latvecs,convention)\ninv_rlatvecs = inv(recip_latvecs)\n(ftrans,pg) = calc_spacegroup(real_latvecs,atom_types,atom_pos,coordinates)\nibz = chull([0.0 0.25; 0.0 0.0; 0.5 0.0; 0.5 0.25])\nkpoint = [2,3]\nibz_point = mapto_ibz(kpoint,recip_latvecs,inv_rlatvecs,ibz,pg,coordinates)\n# output\n2-element Vector{Float64}:\n 0.0\n 0.0\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.mapto_unitcell-Tuple{AbstractMatrix{var\"#s59\"} where var\"#s59\"<:Real, AbstractMatrix{var\"#s58\"} where var\"#s58\"<:Real, AbstractMatrix{var\"#s57\"} where var\"#s57\"<:Real, String}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.mapto_unitcell","text":"mapto_unitcell(points,latvecs,inv_latvecs,coordinates;rtol,atol)\n\nMap points as columns of a matrix to the unitcell.\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.mapto_unitcell-Tuple{AbstractVector{var\"#s3\"} where var\"#s3\"<:Real, AbstractMatrix{var\"#s2\"} where var\"#s2\"<:Real, AbstractMatrix{var\"#s1\"} where var\"#s1\"<:Real, String}","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.mapto_unitcell","text":"mapto_unitcell(pt,latvecs,inv_latvecs,coordinates;rtol,atol)\n\nMap a point to the first unit cell.\n\nArguments\n\npt::AbstractVector{<:Real}: a point in lattice or Cartesian coordinates.\nlatvecs::AbstractMatrix{<:Real}: the basis vectors of the lattice as   columns of a matrix.\ninv_latvecs::AbstractMatrix{<:Real}: the inverse of the matrix of that   contains the lattice vectors.\ncoordinates::String: indicates whether pt is in \"Cartesian\" or   \"lattice\" coordinates.\nrtol::Real=sqrt(eps(float(maximum(inv_latvecs)))): a relative tolerance for   floating point comparisons. Finite precision errors creep up when pt is   transformed to lattice coordinates because the transformation requires   calculating a matrix inverse. The components of the point in lattice   coordinates are checked to ensure that values close to 1 are equal to 1.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\nAbstractVector{<:Real}: a translationally equivalent point to pt in the   first unit cell in the same coordinates.\n\nExamples\n\nusing SymmetryReduceBZ\nreal_latvecs = [0 1 2; 0 -1 1; 1 0 0]\ninv_latvecs=inv(real_latvecs)\npt=[1,2,3.2]\ncoordinates = \"Cartesian\"\nSymmetryReduceBZ.Symmetry.mapto_unitcell(pt,real_latvecs,inv_latvecs,\n    coordinates)\n# output\n3-element Vector{Float64}:\n 0.0\n 0.0\n 0.20000000000000018\n\n\n\n\n\n","category":"method"},{"location":"Documentation/","page":"Documentation","title":"Documentation","text":"SymmetryReduceBZ.Symmetry.pointgroup_size","category":"page"},{"location":"Documentation/#SymmetryReduceBZ.Symmetry.pointgroup_size","page":"Documentation","title":"SymmetryReduceBZ.Symmetry.pointgroup_size","text":"Give the size of the point group of a Bravais lattice.\n\n\n\n\n\n","category":"constant"},{"location":"Documentation/#Utilities","page":"Documentation","title":"Utilities","text":"","category":"section"},{"location":"Documentation/","page":"Documentation","title":"Documentation","text":"Modules = [SymmetryReduceBZ.Utilities]\nOrder   = [:function, :type]","category":"page"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.affine_trans-Tuple{AbstractMatrix{var\"#s9\"} where var\"#s9\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.affine_trans","text":"affine_trans(pts)\n\nCalculate the affine transformation that maps the points to the xy-plane.\n\nArguments\n\npts::AbstractMatrix{<:Real}: Cartesian points as the columns of a matrix.   The points must all lie on a plane in 3D.\n\nReturns\n\nM::AbstractMatrix{<:Real}: the affine transformation matrix that operates   on points in homogeneous coordinates from the left.\n\nExamples\n\nusing SymmetryReduceBZ\npts = [0.5 0.5 0.5; 0.5 -0.5 0.5; -0.5 0.5 0.5; -0.5 -0.5 0.5]'\nSymmetryReduceBZ.Utilities.affine_trans(pts)\n# output\n4×4 Matrix{Float64}:\n  0.0  -1.0   0.0  0.5\n -1.0   0.0   0.0  0.5\n  0.0   0.0  -1.0  0.5\n  0.0   0.0   0.0  1.0\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.contains-Tuple{AbstractArray, AbstractArray}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.contains","text":"contains(array,arrays;rtol,atol)\n\nCheck if an array of arrays contains an array.\n\nArguments\n\narray::AbstractArray: an array of reals of arbitrary dimension.\narrays::AbstractArray: a nested array of arrays of arbitrary dimension.\nrtol::Real=sqrt(eps(float(maximum(pts)))): a relative tolerance for floating   point comparisons.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\nBool: a boolean that indicates the presence of absence of array in   arrays.\n\nExamples\n\nimport SymmetryReduceBZ.Utilities: contains\narrays = [[1 2; 2 3], [2 3; 4 5]]\narray = [1 2; 2 3]\ncontains(array, arrays)\n# output\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.contains-Tuple{AbstractVector{var\"#s4\"} where var\"#s4\"<:Real, AbstractMatrix{var\"#s3\"} where var\"#s3\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.contains","text":"contains(pt,pts;rtol,atol)\n\nCheck if a point is contained in a matrix of points as columns.\n\nArguments\n\npt::AbstractVector{<:Real}: a point whose coordinates are the components of   a vector.\npts::AbstractMatrix{<:Real}: coordinates of points as columns of a matrix.\nrtol::Real=sqrt(eps(float(maximum(pts)))): a relative tolerance for floating   point comparisons\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\nBool: a boolean that indicates the presence or absence of pt in pts.\n\nExamples\n\nimport SymmetryReduceBZ.Utilities: contains\npts = Array([1 2; 2 3; 3 4; 4 5]')\npt = [1,2]\ncontains(pt,pts)\n# output\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.edgelengths-Tuple{AbstractMatrix{var\"#s59\"} where var\"#s59\"<:Real, Real}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.edgelengths","text":"edgelengths(basis,radius;rtol,atol)\n\nCalculate the edge lengths of a parallelepiped circumscribed by a sphere.\n\nArguments\n\nbasis::AbstractMatrix{<:Real}: a 2x2 or 3x3 matrix whose columns give the   parallelogram or parallelepiped directions, respectively.\nradius::Real: the radius of the sphere.\nrtol::Real=sqrt(eps(float(radius))): a relative tolerace for   floating point comparisons.\natol::Real=1e-9: an absolute tolerance for floating point   comparisons.\n\nReturns\n\n[la,lb,lc]::AbstractVector{<:Real}: a list of parallelepiped lengths.\n\nExamples\n\nusing SymmetryReduceBZ\nbasis=Array([1. 0. 0.; 0. 1. 0.; 0. 0. 1.])\nradius=3.0\nSymmetryReduceBZ.Utilities.edgelengths(basis,radius)\n# output\n3-element Vector{Float64}:\n 3.0\n 3.0\n 3.0\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.get_uniquefacets-Tuple{QHull.Chull{var\"#s58\"} where var\"#s58\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.get_uniquefacets","text":"get_uniquefacets(ch)\n\nCalculate the unique facets of a convex hull.\n\nArguments\n\nch::Chull{<:Real}: a convex hull in 3D from QHull.\n\nReturns\n\nunique_facets::Vector{Vector{Int64}}: a nested list of the   indices of points that lie on each face. For example, the points that lie on   the first face are ch.points[unique_facets[1],:].\n\nExamples\n\nimport SymmetryReduceBZ.Utilities: get_uniquefacets\nimport SymmetryReduceBZ.Symmetry: calc_bz\nreal_latvecs = [1 0 0; 0 1 0; 0 0 1]\natom_types = [0]\natom_pos = Array([0 0 0]')\ncoordinates = \"Cartesian\"\nbzformat = \"convex hull\"\nmakeprim = false\nconvention = \"ordinary\"\nbz = calc_bz(real_latvecs,atom_types,atom_pos,coordinates,bzformat,makeprim,convention)\nget_uniquefacets(bz)\n# output\n6-element Vector{Vector{Int32}}:\n [1, 2, 3, 4]\n [7, 2, 3, 5]\n [6, 4, 3, 5]\n [7, 2, 1, 8]\n [6, 4, 1, 8]\n [8, 7, 5, 6]\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.mapto_xyplane-Tuple{AbstractMatrix{var\"#s60\"} where var\"#s60\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.mapto_xyplane","text":"function mapto_xyplane(pts)\n\nMap Cartesian points embedded in 3D on a plane to the xy-plane embedded in 2D.\n\nArguments\n\npts::AbstractMatrix{<:Real}: Cartesian points embedded in 3D as columns of a   matrix.\n\nReturns\n\nAbstractMatrix{<:Real}: Cartesian points in 2D as columns of a matrix.\n\nExamples\n\nusing SymmetryReduceBZ\npts = [0.5 -0.5 0.5; 0.5 -0.5 -0.5; 0.5 0.5 -0.5; 0.5 0.5 0.5]'\nSymmetryReduceBZ.Utilities.mapto_xyplane(pts)\n# output\n2×4 Matrix{Float64}:\n 0.0  1.0  1.0  0.0\n 0.0  0.0  1.0  1.0\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.points₋in₋ball-Tuple{AbstractMatrix{var\"#s57\"} where var\"#s57\"<:Real, Real, AbstractVector{var\"#s56\"} where var\"#s56\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.points₋in₋ball","text":"points₋in₋ball(points,radius,offset,rtol=sqrt(eps(float(radius))),atol=1e-9)\n\nCalculate the points within a ball (circle, sphere, ...).\n\nArguments\n\npoints::AbstractMatrix{<:Real}: points in Cartesian coordinates as columns of a matrix.\nradius::Real: the radius of the ball.\noffset::AbstractVector{<:Real}: the location of the center of the ball in Cartesian coordinates.\nrtol::Real=sqrt(eps(float(radius))): a relative tolerance for floating point comparisons.\natol::Real=1e-9: an absolute tolerance.\n\nReturns\n\nball_points::AbstractVector{<:Int}: the indices of points in points within the ball.\n\nExamples\n\nimport SymmetryReduceBZ.Utilities: points₋in₋ball\npoints = [0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.25 0.3 0.35 0.4 0.45 0.5 0.3 0.35 0.4 0.45 0.5 0.35 0.4 0.45 0.5 0.4 0.45 0.5 0.45 0.5 0.5; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.15 0.15 0.15 0.15 0.15 0.15 0.15 0.15 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.25 0.25 0.25 0.25 0.25 0.25 0.3 0.3 0.3 0.3 0.3 0.35 0.35 0.35 0.35 0.4 0.4 0.4 0.45 0.45 0.5]\nradius = 0.1\noffset = [0,0]\npoints₋in₋ball(points,radius,offset)\n# output\n4-element Vector{Int64}:\n  1\n  2\n  3\n 12\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.remove_duplicates-Tuple{AbstractVector{T} where T}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.remove_duplicates","text":"remove_duplicates(points;rtol,atol)\n\nRemove duplicates from an array.\n\nArguments\n\npoints::AbstractVector: items in a vector, which can be floats or arrays.\nrtol::Real=sqrt(eps(float(maximum(points)))): relative tolerance.\natol::Real=1e-9: absolute tolerance.\n\nReturns\n\nuniquepts::AbstractVector: an vector with only unique elements.\n\nExamples\n\nimport SymmetryReduceBZ.Utilities: remove_duplicates\ntest = [1.,1.,2,2,]\nremove_duplicates(test)\n# output\n2-element Vector{Float64}:\n 1.0\n 2.0\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.sample_circle","page":"Documentation","title":"SymmetryReduceBZ.Utilities.sample_circle","text":"sample_circle(basis,radius,offset;rtol,atol)\n\nSample uniformly within a circle centered about a point.\n\nArguments\n\nbasis::AbstractMatrix{<:Real}: a 2x2 matrix whose columns are the grid   generating vectors.\nradius::Real: the radius of the circle.\noffset::AbstractVector{<:Real}=[0.,0.]: the xy-coordinates of the center of   the circle.\nrtol::Real=sqrt(eps(float(radius))): a relative tolerace for floating point   comparisons.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\npts::AbstractMatrix{<:Real} a matrix whose columns are sample points in Cartesian   coordinates.\n\nExamples\n\nusing SymmetryReduceBZ\nbasis=Array([1. 0.; 0. 1.]')\nradius=1.0\noffset=[0.,0.]\nSymmetryReduceBZ.Utilities.sample_circle(basis,radius,offset)\n# output\n2×5 Matrix{Float64}:\n  0.0  -1.0  0.0  1.0  0.0\n -1.0   0.0  0.0  0.0  1.0\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.sample_sphere","page":"Documentation","title":"SymmetryReduceBZ.Utilities.sample_sphere","text":"sample_sphere(basis,radius,offset;rtol,atol)\n\nSample uniformly within a sphere centered about a point.\n\nArguments\n\nbasis::AbstractMatrix{<:Real}: a 3x3 matrix whose columns are the grid generating   vectors.\nradius::Real: the radius of the sphere.\noffset::AbstractVector{<:Real}=[0.,0.]: the xy-coordinates of the center of the   circle.\nrtol::Real=sqrt(eps(float(radius))): a relative tolerace for   floating point comparisons.\natol::Real=1e-9: an absolute tolerance for floating point   comparisons.\n\nReturns\n\npts::AbstractMatrix{<:Real} a matrix whose columns are sample points in Cartesian   coordinates.\n\nExamples\n\nusing SymmetryReduceBZ\nbasis=Array([1. 0. 0.; 0. 1. 0.; 0. 0. 1.])\nradius=1.0\noffset=[0.,0.,0.]\nSymmetryReduceBZ.Utilities.sample_sphere(basis,radius,offset)\n# output\n3×7 Matrix{Float64}:\n  0.0   0.0  -1.0  0.0  1.0  0.0  0.0\n  0.0  -1.0   0.0  0.0  0.0  1.0  0.0\n -1.0   0.0   0.0  0.0  0.0  0.0  1.0\n\n\n\n\n\n","category":"function"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.shoelace-Tuple{AbstractMatrix{var\"#s64\"} where var\"#s64\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.shoelace","text":"shoelace(vertices)\n\nCalculate the area of a polygon with the shoelace algorithm.\n\nArguments\n\nvertices::AbstractMatrix{<:Real}: the xy-coordinates of the vertices   of the polygon as the columns of a matrix.\n\nReturns\n\n<:Real: the area of the polygon.\n\nExamples\n\n```jldoctest import SymmetryReduceBZ.Utilities: shoelace pts = [0 0 1; -1 1 0] shoelace(pts)\n\noutput\n\n1.0 ````\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.sortpts2D-Tuple{AbstractMatrix{var\"#s61\"} where var\"#s61\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.sortpts2D","text":"function sortpts2D(pts)\n\nCalculate the permutation vector that sorts 2D Cartesian points counterclockwise with     respect to the average of the points.\n\nArguments\n\npts::AbstractMatrix{<:Real}: Cartesian points in 2D.\n\nReturns\n\nperm::AbstractVector{<:Real}: the permutation vector that orders the points   clockwise or counterclockwise.\n\n```\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.sortpts_perm-Tuple{AbstractMatrix{var\"#s64\"} where var\"#s64\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.sortpts_perm","text":"function sortpts_perm(pts)\n\nCalculate the permutation vector that sorts Cartesian points embedded in 3D that     lie on a plane (counter)clockwise with respect to the average of all points.\n\nArguments\n\npts::AbstractMatrix{<:Real}: Cartesian points embedded in 3D that all lie   on a plane. The points are columns of a matrix.\n\nReturns\n\n::AbstractVector{<:Real}: the permutation vector that orders the points   clockwise or counterclockwise.\n\nExamples\n\nimport SymmetryReduceBZ.Utilities: sortpts_perm\npts = [0.5 -0.5 0.5; 0.5 -0.5 -0.5; 0.5 0.5 -0.5; 0.5 0.5 0.5]'\nperm=sortpts_perm(pts)\npts[:,perm]\n# output\n3×4 Matrix{Float64}:\n  0.5   0.5   0.5  0.5\n -0.5  -0.5   0.5  0.5\n  0.5  -0.5  -0.5  0.5\n\n\n\n\n\n","category":"method"},{"location":"Documentation/#SymmetryReduceBZ.Utilities.unique_points-Tuple{AbstractMatrix{var\"#s60\"} where var\"#s60\"<:Real}","page":"Documentation","title":"SymmetryReduceBZ.Utilities.unique_points","text":"unique_points(points;rtol,atol)\n\nRemove duplicate points.\n\nArguments\n\npoints::AbstractMatrix{<:Real}: the points are columns of a matrix.\nrtol::Real=sqrt(eps(float(maximum(flatten(points))))): a relative tolerance   for floating point comparisons.\natol::Real=1e-9: an absolute tolerance for floating point comparisons.\n\nReturns\n\nuniquepts::AbstractMatrix{<:Real}: the unique points as columns of a matrix.\n\nExamples\n\nusing SymmetryReduceBZ\npoints=Array([1 2; 2 3; 3 4; 1 2]')\nSymmetryReduceBZ.Utilities.unique_points(points)\n# output\n2×3 Matrix{Int64}:\n 1  2  3\n 2  3  4\n\n\n\n\n\n","category":"method"},{"location":"Usage/#User-guide","page":"User guide","title":"User guide","text":"","category":"section"},{"location":"Usage/#Julia","page":"User guide","title":"Julia","text":"","category":"section"},{"location":"Usage/","page":"User guide","title":"User guide","text":"To calculate the IBZ, simply provide the lattice and atomic basis to calc_ibz. The IBZ will be returned as either a convex hull or intersection of half spaces.","category":"page"},{"location":"Usage/","page":"User guide","title":"User guide","text":"import SymmetryReduceBZ.Lattices: genlat_CUB\nimport SymmetryReduceBZ.Symmetry: calc_ibz\na = 2.0\nreal_latvecs = genlat_CUB(a)\natom_types = [0,0]\natom_pos = Array([0 0 0; 0.5 0.5 0.5]')\nibzformat = \"convex hull\"\ncoordinates = \"Cartesian\"\nmakeprim = false\nconvention = \"ordinary\"\nibz = calc_ibz(real_latvecs,atom_types,atom_pos,coordinates,ibzformat,\n  makeprim,convention)","category":"page"},{"location":"Usage/","page":"User guide","title":"User guide","text":"The columns of real_latvecs are the lattice generating vectors, the columns of atom_pos are the positions of the atoms in Cartesian coordinates (in this case), coordinates are the coordinates of the atom positions, and convention gives the convention for going from real to reciprocal space (whether or not to multiply by 2π). There is a simple function for visualizing the IBZ along with the Brillouin zone (BZ).","category":"page"},{"location":"Usage/","page":"User guide","title":"User guide","text":"import SymmetryReduceBZ.Plotting: plot_convexhulls\nimport SymmetryReduceBZ.Lattices: genlat_CUB\na = 2.0\nreal_latvecs = genlat_CUB(a)\natom_types = [0,0]\natom_pos = Array([0 0 0; 0.5 0.5 0.5]')\ncoordinates = \"Cartesian\"\nmakeprim = false\nconvention = \"ordinary\"\nax=plot_convexhulls(real_latvecs,atom_types,atom_pos,coordinates,\n  makeprim,convention)","category":"page"},{"location":"Usage/#Python","page":"User guide","title":"Python","text":"","category":"section"},{"location":"Usage/","page":"User guide","title":"User guide","text":"It is possible to call SymmetryReduceBZ from Python using  PyJulia. In a Jupyter notebook, IPython magic can be used to directly evaluate Julia commands in notebook cells.","category":"page"},{"location":"Usage/","page":"User guide","title":"User guide","text":"from julia import Julia\njl = Julia(runtime=\"/usr/local/bin/julia\")","category":"page"},{"location":"Usage/","page":"User guide","title":"User guide","text":"%%julia\nusing Pkg\nPkg.add(\"SymmetryReduceBZ\")\nimport SymmetryReduceBZ.Plotting: plot_convexhulls\nimport SymmetryReduceBZ.Lattices: genlat_CUB\n\na = 1.0\nreal_latvecs = genlat_CUB(a)\natom_types = [0,1]\natom_pos = Array([0 0 0; 0.5 0.5 0.5]')\ncoordinates = \"Cartesian\"\nprimitive = true\nmakeprim = false\nconvention = \"ordinary\"\nax=plot_convexhulls(real_latvecs,atom_types,atom_pos,coordinates,makeprim,\n   convention)","category":"page"},{"location":"Usage/","page":"User guide","title":"User guide","text":"Without IPython magic, Julia commands can be called with the eval method of PyJulia.","category":"page"},{"location":"Usage/","page":"User guide","title":"User guide","text":"from julia import Julia\njl = Julia(runtime=\"/usr/local/bin/julia\")\n\njl.eval(\"\"\"\nusing Pkg\nPkg.add(\\\"SymmetryReduceBZ\\\")\nimport SymmetryReduceBZ.Plotting: plot_convexhulls\nimport SymmetryReduceBZ.Lattices: genlat_CUB\na = 1.0\nreal_latvecs = genlat_CUB(a)\natom_types = [0,1]\natom_pos = Array([0 0 0; 0.5 0.5 0.5]')\ncoordinates = \"Cartesian\"\nmakeprim = true\nconvention = \"ordinary\"\nax=plot_convexhulls(real_latvecs,atom_types,atom_pos,coordinates,makeprim,\n   convention)\n\"\"\")","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SymmetryReduceBZ.jl is a julia package for calculating the Brillouin zone and irreducible Brillouin zone. It also contains methods related to the symmetry of lattices and lattice reduction.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"Usage.md\", \"Documentation.md\"]\ndepth = 5","category":"page"}]
}
